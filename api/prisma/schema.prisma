// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー管理
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  profileImageUrl String?
  lastLoginAt     DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // リレーション
  refreshTokens   RefreshToken[]  // 長期ログイン維持用
  apiUsages       ApiUsage[]
  oauthAccounts   OAuthAccount[]  // 複数OAuth対応
  voc          Voc[]
}

// OAuth アカウント管理（複数プロバイダー対応）
model OAuthAccount {
  id           String   @id @default(cuid())
  userId       String
  provider     String   // "google" | "github" | "discord" etc
  providerId   String   // プロバイダー側のユーザーID
  email        String?  // プロバイダーから取得したメール
  username     String?  // GitHub username等
  accessToken  String?  @db.Text // 必要に応じて暗号化
  refreshToken String?  @db.Text
  expiresAt    DateTime?
  scope        String?  // 取得した権限スコープ
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerId])
  @@unique([userId, provider])  // 1ユーザーにつき1プロバイダー1アカウント
  @@index([userId])
  @@index([provider, email])
}

// JWTのリフレッシュトークン管理
model RefreshToken {
  id          String    @id @default(cuid())
  userId      String
  tokenHash   String    @unique // ハッシュ化して保存
  isRevoked   Boolean   @default(false)
  expiresAt   DateTime  // 7日後
  userAgent   String?
  ipAddress   String?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, expiresAt])
  @@index([expiresAt])
}

// API使用状況（レート制御用）
model ApiUsage {
  id          String    @id @default(cuid())
  userId      String
  endpoint    String    // 例: "/ai/generate"
  count       Int       @default(1)
  windowStart DateTime  // ウィンドウ開始時刻
  windowEnd   DateTime  // ウィンドウ終了時刻
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, endpoint, windowStart])
  @@index([userId, windowStart])
  @@index([windowEnd]) // 期限切れレコードの削除用
}


// VOC - 核心機能
model Voc {
  id         String   @id @default(cuid())
  title      String
  content    String   @db.Text
  source     String   // "zoom" | "slack" | "manual"
  sourceUrl  String?  // Zoom録画URL等
  
  // インパクト（これが最重要）
  impact     Decimal? @db.Decimal(15, 2) // 予想される収益影響（円）
  effort     Int?     // 実装工数 (1-10)
  
  // AI分析結果
  summary    String?  @db.Text
  
  userId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // リレーション
  user       User     @relation(fields: [userId], references: [id])
  
  @@index([userId, createdAt])
  @@index([impact, effort]) // インパクトマップ用
}