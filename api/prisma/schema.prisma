// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ユーザー管理
// schema.prisma - 最もシンプルなJWT + パスワード認証
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  passwordHash    String    // パスワードハッシュを直接保存
  profileImageUrl String?
  emailVerified   Boolean   @default(false)
  lastLoginAt     DateTime?
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // リレーション
  projects        Project[]
  refreshTokens   RefreshToken[]  // 長期ログイン維持用
  apiUsages       ApiUsage[]
  verificationTokens VerificationToken[] // メール認証用
  
  @@map("users")
}

// JWTのリフレッシュトークン管理
model RefreshToken {
  id          String    @id @default(cuid())
  userId      String
  tokenHash   String    @unique // ハッシュ化して保存
  isRevoked   Boolean   @default(false)
  expiresAt   DateTime  // 7日後
  userAgent   String?
  ipAddress   String?
  lastUsedAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, expiresAt])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// メール認証・パスワードリセット用
model VerificationToken {
  id          String    @id @default(cuid())
  userId      String
  token       String    @unique
  type        String    // "email_verification" | "password_reset"
  expiresAt   DateTime
  isUsed      Boolean   @default(false)
  createdAt   DateTime  @default(now())
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([token, type])
  @@index([expiresAt])
  @@map("verification_tokens")
}

// 以下は既存のビジネスロジック用テーブル（変更なし）
model ApiUsage {
  id          String    @id @default(cuid())
  userId      String
  endpoint    String
  count       Int       @default(1)
  windowStart DateTime
  windowEnd   DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, endpoint, windowStart])
  @@index([userId, windowStart])
  @@index([windowEnd])
  @@map("api_usages")
}

model Project {
  id          String    @id @default(cuid())
  name        String
  description String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  functions   Function[]
  
  @@index([userId, createdAt])
  @@map("projects")
}

model Function {
  id          String    @id @default(cuid())
  name        String
  description String?
  projectId   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  variations  Variation[]
  
  @@map("functions")
}

model Variation {
  id            String    @id @default(cuid())
  name          String
  description   String?
  functionId    String
  prompt        String    @db.Text
  aiModel       String?
  framework     String    @default("vanilla")
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  function      Function  @relation(fields: [functionId], references: [id], onDelete: Cascade)
  files         GeneratedFile[]
  previewConfig PreviewConfig?
  generations   GenerationHistory[]
  
  @@index([functionId, isActive])
  @@map("variations")
}

model GeneratedFile {
  id          String    @id @default(cuid())
  variationId String
  filePath    String
  fileName    String    
  content     String?   @db.Text
  s3Key       String?
  fileSize    Int
  mimeType    String
  storageType String    @default("db")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  variation   Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)
  
  @@unique([variationId, filePath])
  @@index([variationId, filePath])
  @@map("generated_files")
}

model PreviewConfig {
  id            String    @id @default(cuid())
  variationId   String    @unique
  entryPoint    String    @default("index.html")
  buildCommand  String?
  dependencies  Json?
  envVariables  Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  variation     Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)
  
  @@map("preview_configs")
}

model GenerationHistory {
  id            String    @id @default(cuid())
  variationId   String
  prompt        String    @db.Text
  requestTokens Int
  responseTokens Int
  status        String    @default("success")
  error         String?   @db.Text
  createdAt     DateTime  @default(now())
  
  variation     Variation @relation(fields: [variationId], references: [id], onDelete: Cascade)
  
  @@index([variationId, createdAt])
  @@map("generation_histories")
}